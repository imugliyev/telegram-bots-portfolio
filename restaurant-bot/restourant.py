import asyncio
import gspread
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# ======== –ù–ê–°–¢–†–û–ô–ö–ò GOOGLE SHEETS ========
SCOPES = [
]
CREDENTIALS_FILE = 'credentials.json'
SPREADSHEET_NAME = 'Telegram Orders'

ADMIN_CHAT_ID = '' # ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_BOT_TOKEN = ""  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

def google_sheets_auth():
    creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, SCOPES)
    client = gspread.authorize(creds)
    return client.open(SPREADSHEET_NAME).sheet1

# ======== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ========
bot = Bot(token="—Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
dp = Dispatcher()
sheet = google_sheets_auth()

# ======== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ========
user_carts = {}
user_data = {}
order_states = {}

menu_items = {
    "–ü–ª–æ–≤": 250,
    "–®–∞—à–ª—ã–∫": 300,
    "–õ–∞–≥–º–∞–Ω": 200,
    "–°–∞–º—Å–∞": 80,
    "–°–∞–ª–∞—Ç –æ–≤–æ—â–Ω–æ–π": 150,
    "–ß–∞–π": 50
}

# ======== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ========
def initialize_user(user_id: int):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"""
    if user_id not in user_carts:
        user_carts[user_id] = {}
    if user_id not in user_data:
        user_data[user_id] = {"name": "", "address": "", "phone": ""}
    if user_id not in order_states:
        order_states[user_id] = "start"

# ======== –ö–õ–ê–í–ò–ê–¢–£–†–´ ========
main_builder = ReplyKeyboardBuilder()
main_builder.row(
    types.KeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å"),
    types.KeyboardButton(text="–ú–µ–Ω—é"),
    types.KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")
)
main_builder.row(
    types.KeyboardButton(text="–•–∞–ª—è–ª—å-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"),
    types.KeyboardButton(text="–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏")
)
main_keyboard = main_builder.as_markup(resize_keyboard=True)

# ======== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ========
@dp.message(lambda m: m.text == "/start")
async def start_handler(m: types.Message):
    user_id = m.from_user.id
    initialize_user(user_id)
    await m.answer(
        "üç¥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ä–µ—Å—Ç–æ—Ä–∞–Ω!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_keyboard
    )

@dp.message(lambda m: m.text == "–ú–µ–Ω—é")
async def menu_handler(m: types.Message):
    initialize_user(m.from_user.id)
    builder = InlineKeyboardBuilder()
    for item, price in menu_items.items():
        builder.add(types.InlineKeyboardButton(
            text=f"{item} - {price}‚ÇΩ",
            callback_data=f"add_{item}"
        ))
    builder.adjust(2)
    await m.answer("üçî –ù–∞—à–µ –º–µ–Ω—é:", reply_markup=builder.as_markup())

@dp.message(lambda m: m.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def cart_handler(m: types.Message):
    user_id = m.from_user.id
    initialize_user(user_id)
    
    cart = user_carts.get(user_id, {})
    if not cart:
        await m.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    total = 0
    cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    for item, quantity in cart.items():
        price = menu_items[item] * quantity
        total += price
        cart_text += f"{item} x{quantity} = {price}‚ÇΩ\n"
    
    cart_text += f"\nüí≥ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
        callback_data="clear_cart"
    ))
    builder.add(types.InlineKeyboardButton(
        text="–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é",
        callback_data="remove_item"
    ))
    await m.answer(cart_text, reply_markup=builder.as_markup())

@dp.message(lambda m: m.text == "–ó–∞–∫–∞–∑–∞—Ç—å")
async def order_handler(m: types.Message):
    user_id = m.from_user.id
    initialize_user(user_id)
    
    cart = user_carts.get(user_id, {})
    if not cart:
        await m.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞! –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–µ–Ω—é.")
        return
    
    order_states[user_id] = "waiting_name"
    await m.answer("üìù –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

@dp.message(lambda m: order_states.get(m.from_user.id) == "waiting_name")
async def name_handler(m: types.Message):
    user_id = m.from_user.id
    initialize_user(user_id)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    user_data[user_id]["name"] = m.text
    order_states[user_id] = "waiting_address"
    await m.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

@dp.message(lambda m: order_states.get(m.from_user.id) == "waiting_address")
async def address_handler(m: types.Message):
    user_id = m.from_user.id
    initialize_user(user_id)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    user_data[user_id]["address"] = m.text
    order_states[user_id] = "waiting_phone"
    await m.answer("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")

@dp.message(lambda m: order_states.get(m.from_user.id) == "waiting_phone")
async def phone_handler(m: types.Message):
    user_id = m.from_user.id
    initialize_user(user_id)  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    user_data[user_id]["phone"] = m.text
    cart = user_carts.get(user_id, {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    total = 0
    order_text = "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
    order_text += f"üë§ –ò–º—è: {user_data[user_id]['name']}\n"
    order_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id]['phone']}\n"
    order_text += f"üè† –ê–¥—Ä–µ—Å: {user_data[user_id]['address']}\n\n"
    order_text += "üçΩ –ó–∞–∫–∞–∑:\n"
    
    order_items = []
    for item, quantity in cart.items():
        price = menu_items[item] * quantity
        total += price
        order_text += f"- {item} x{quantity} = {price}‚ÇΩ\n"
        order_items.append(f"{item} x{quantity}")
    
    order_text += f"\nüí≥ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\n"
    order_text += "‚åõ –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞!"
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Google Sheets
    try:
        row = [
            user_data[user_id]["name"],
            user_data[user_id]["phone"],
            user_data[user_id]["address"],
            ", ".join(order_items),
            str(total),
            str(user_id),
            f"@{m.from_user.username}" if m.from_user.username else "",
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ]
        sheet.append_row(row)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        await m.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
        return
    
    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_carts[user_id] = {}
    order_states[user_id] = None
    
    await m.answer(order_text)

    # –í —Ñ—É–Ω–∫—Ü–∏–∏ phone_handler –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É:
    # ... (–ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    try:
        order_data = {
            "name": user_data[user_id]["name"],
            "phone": user_data[user_id]["phone"],
            "address": user_data[user_id]["address"],
            "items": ", ".join(order_items),
            "total": total,
            "user_id": user_id,
            "username": f"@{m.from_user.username}" if m.from_user.username else "",
            "datetime": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        admin_bot = Bot(token=ADMIN_BOT_TOKEN)
        await admin_bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üöÄ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                f"üë§ –ò–º—è: {order_data['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}\n"
                f"üè† –ê–¥—Ä–µ—Å: {order_data['address']}\n"
                f"üçΩ –ó–∞–∫–∞–∑: {order_data['items']}\n"
                f"üí≥ –°—É–º–º–∞: {order_data['total']} —Ä—É–±.\n"
                f"üÜî User ID: {order_data['user_id']}\n"
                f"üë§ Username: {order_data['username']}\n"
                f"üìÖ –î–∞—Ç–∞: {order_data['datetime']}"
        )
        await admin_bot.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

@dp.message(lambda m: m.text == "–•–∞–ª—è–ª—å-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")
async def halal_handler(m: types.Message):
    initialize_user(m.from_user.id)
    await m.answer_photo(
        "https://sun9-37.userapi.com/impf/c824604/v824604537/458ae/s_dKkTlomFw.jpg?size=368x258&quality=96&sign=4588dcaf399b6faa8792422abe1b64c0&c_uniq_tag=CaE_hlt5vqAnvWAYIDYOaooymX8q6Blr83APoCD7Jmc&type=album–ª",
        caption="–ù–∞—à —Ö–∞–ª—è–ª—å-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
    )

@dp.message(lambda m: m.text == "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏")
async def delivery_time_handler(m: types.Message):
    initialize_user(m.from_user.id)
    await m.answer(
        "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞: 10:00 - 23:00\n"
        "–°—É–±–±–æ—Ç–∞-–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 11:00 - 00:00\n\n"
        "üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 30-60 –º–∏–Ω—É—Ç"
    )

# ======== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK-–ö–ù–û–ü–û–ö ========
@dp.callback_query(lambda c: c.data.startswith("add_"))
async def add_to_cart(c: types.CallbackQuery):
    user_id = c.from_user.id
    initialize_user(user_id)
    
    item = c.data[4:]
    if user_id not in user_carts:
        user_carts[user_id] = {}
    
    if item not in user_carts[user_id]:
        user_carts[user_id][item] = 1
    else:
        user_carts[user_id][item] += 1
    
    await c.answer(f"{item} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

@dp.callback_query(lambda c: c.data == "clear_cart")
async def clear_cart(c: types.CallbackQuery):
    user_id = c.from_user.id
    initialize_user(user_id)
    
    if user_id in user_carts:
        user_carts[user_id] = {}
    await c.message.edit_text("üõí –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")
    await c.answer()

@dp.callback_query(lambda c: c.data == "remove_item")
async def remove_item_prompt(c: types.CallbackQuery):
    user_id = c.from_user.id
    initialize_user(user_id)
    
    cart = user_carts.get(user_id, {})
    if not cart:
        await c.answer("–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞!")
        return
    
    builder = InlineKeyboardBuilder()
    for item in cart.keys():
        builder.add(types.InlineKeyboardButton(
            text=item,
            callback_data=f"remove_{item}"
        ))
    builder.adjust(2)
    
    await c.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await c.answer()

@dp.callback_query(lambda c: c.data.startswith("remove_"))
async def remove_item(c: types.CallbackQuery):
    user_id = c.from_user.id
    initialize_user(user_id)
    
    item = c.data[7:]
    if user_id in user_carts and item in user_carts[user_id]:
        if user_carts[user_id][item] > 1:
            user_carts[user_id][item] -= 1
            await c.answer(f"–£–¥–∞–ª–µ–Ω –æ–¥–∏–Ω {item}")
        else:
            del user_carts[user_id][item]
            await c.answer(f"{item} –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
        cart = user_carts.get(user_id, {})
        if cart:
            total = 0
            cart_text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
            for item, quantity in cart.items():
                price = menu_items[item] * quantity
                total += price
                cart_text += f"{item} x{quantity} = {price}‚ÇΩ\n"
            
            cart_text += f"\nüí≥ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
            
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
                callback_data="clear_cart"
            ))
            builder.add(types.InlineKeyboardButton(
                text="–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é",
                callback_data="remove_item"
            ))
            await c.message.edit_text(cart_text, reply_markup=builder.as_markup())
        else:
            await c.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
    else:
        await c.answer("–≠—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ")

# ======== –û–ë–†–ê–ë–û–¢–ß–ò–ö –õ–Æ–ë–´–• –°–û–û–ë–©–ï–ù–ò–ô ========
@dp.message()
async def any_message_handler(m: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –ø–æ–ø–∞–≤—à–∏—Ö –≤ –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏"""
    initialize_user(m.from_user.id)
    await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")


# ======== –ó–ê–ü–£–°–ö –ë–û–¢–ê ========
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())